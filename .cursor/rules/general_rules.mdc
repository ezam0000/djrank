---
description: General development rules for this project
globs:
alwaysApply: true
---

# Development Rules

## Code Changes

- Only make changes I explicitly request
- If you have suggestions, mention them as comments - don't implement unless approved
- Prioritize simplicity and elegance - avoid unnecessary complexity
- Do not append code blindly - place changes in their correct logical locations
- Never hallucinate - if unsure about code/files/context, inspect them first
- Finish tasks completely before ending your turn
- Minimal code changes when fixing issues

## Security & Environment

- **NEVER hardcode API keys, secrets, or credentials in code**
- Always use environment variables for sensitive data
- Use `dotenv` for local development
- Keep `.env` in `.gitignore`
- Client-side code should fetch config from server API endpoints
- Verify no secrets are exposed in client-side code before deploying

## Terminal & Deployment

- **NEVER run terminal commands without explicit permission**
- **NEVER commit to git unless explicitly requested**
- **NEVER auto-deploy to production** - only after:
  1. Testing locally successfully
  2. Code is committed to git
  3. User explicitly approves deployment
- Don't run npm install/start automatically - let user control terminal
- Always test locally before pushing to production

## Code Quality

- Do not introduce linter or formatting errors
- Never generate extremely long hashes or non-textual code
- Avoid fallback or bloated code - keep logic lean
- No hardcoded values or manually modified databases
- Challenge assumptions and correct errors honestly
- Be lint-aware

## Architecture

- Keep code modular - don't bloat server.js or client.js unnecessarily
- Separate concerns into appropriate files
- Use appropriate storage solutions (localStorage â†’ cloud when needed)
- Follow mobile-first design principles
- **CRITICAL: Maintain glassmorphism/liquid glass design language**

## Design Language (CRITICAL)

- **Glassmorphism/Liquid Glass:** All UI elements use glass effects with backdrop blur
- **Minimalist & Professional:** No emojis, no unnecessary decorations, no visual clutter
- **Elegant & Clean:** Every element serves a purpose, nothing added "just in case"
- **Dark Mode:** Professional dark theme with subtle accents
- **Typography:** Clear, readable fonts - never too small (minimum 0.9rem on desktop, 0.85rem mobile)
- **Spacing:** Generous padding and margins for breathing room
- **Mobile-First:** All features must work perfectly on mobile with touch interactions
- **Non-Invasive UI:** Tooltips, modals, and overlays should be contextual and not block the main workflow

## Planning

- Create plans in markdown before making changes for complex tasks
- Think through steps before using tools
- Review outcomes and adjust accordingly
- Use semantic search to understand codebase thoroughly

## This Project Specifics

- Port: 3003 (local development)
- Storage: Vercel Postgres (cloud database) via `/api/djs` endpoint
- APIs: Spotify (required), SoundCloud (optional)
- Deployment: Vercel with auto-deploy from git
- Design: Dark mode, glassmorphism, mobile-first
- Media: Base64-encoded images/videos (manual compression: WebP for images, H.264 MP4 for videos)
- Database: Neon Postgres (serverless) integrated with Vercel
- Environment: `.env.local` for local dev, Vercel env vars for production
- Admin: Secure token-based auth (64-char secret, rate limiting, constant-time comparison)

## Database & API Rules

- **Always convert empty strings to `null` for database fields (especially dates)**
- **Never send empty strings for DATE fields** - Postgres requires valid date or null
- **Optimize API calls**: Update local data directly instead of reloading from DB when possible
- **Handle array fields properly**: `TEXT[]` arrays for photos/videos
- **Boolean fields**: Ensure proper type conversion for bonus/penalty checkboxes
- **Add null checks**: Always check if element exists before accessing properties (e.g., `element?.classList`)

## Admin Mode Features

- **Drag & Drop**: Admin can override any tier assignment regardless of score
- **Drag back to library**: Move DJs from tiers back to unranked library
- **Delete differentiation**:
  - Library: Permanent deletion with confirmation
  - Tiers: Remove from tier (move back to library)
- **No duplicates**: Filter duplicate DJs by ID in library display
- **Show remove buttons**: Only visible in admin mode (hover on desktop, touch for mobile)
